RectangleMorph subclass: #Card	instanceVariableNames: 'rank suit cardHolder'	classVariableNames: ''	poolDictionaries: ''	category: 'WarGameSimulation'!!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card1	^{0.4}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/10/2023 02:04'!card10	^{0.2@0.125 . 0.2@0.325 . 0.2@0.525 . 0.2@0.725 . 0.6@0.125 . 0.6@0.325 . 0.6@0.525 . 0.6@0.725 . 0.4@0.225 . 0.4@0.625}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card2	^{0.4@0.2 . 0.4@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card3	^{0.4@0.2 . 0.4@0.4 . 0.4@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card4	^{0.2@0.2 . 0.6@0.2 . 0.2@0.6 . 0.6@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card5	^{0.2@0.2 . 0.6@0.2 . 0.4@0.4 . 0.2@0.6 . 0.6@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card6	^{0.2@0.2 . 0.6@0.2 . 0.2@0.4 . 0.6@0.4 . 0.2@0.6 . 0.6@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card7	^{0.2@0.2 . 0.2@0.4 . 0.4@0.3 . 0.2@0.6 . 0.6@0.2 . 0.6@0.4 . 0.6@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card8	^{0.2@0.2 . 0.2@0.4 . 0.4@0.3 . 0.2@0.6 . 0.6@0.2 . 0.4@0.5 . 0.6@0.4 . 0.6@0.6}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 22:51'!card9	^{0.2@0.125 . 0.2@0.325 . 0.2@0.525 . 0.2@0.725 . 0.6@0.125 . 0.6@0.325 . 0.6@0.525 . 0.6@0.725 . 0.4@0.4}! !!Card methodsFor: 'suits position' stamp: 'Amjad Toama 3/7/2023 23:30'!cardSpecial	^{0.15@0.12 . 0.65@0.6}! !!Card methodsFor: 'comparing' stamp: 'Amjad Toama 3/10/2023 01:59'!< aCard	| ranks |	ranks := #(2 3 4 5 6 7 8 9 10 $J $Q $K $A).	^ ((ranks indexOf: self rank) < (ranks indexOf: aCard rank))! !!Card methodsFor: 'comparing' stamp: 'Amjad Toama 3/10/2023 01:59'!equals: aCard	| ranks |	ranks := #(2 3 4 5 6 7 8 9 10$J $Q $K $A).	^ ((ranks indexOf: self rank) = (ranks indexOf: aCard rank))! !!Card methodsFor: 'initializations' stamp: 'Amjad Toama 3/7/2023 22:54'!initialize	super initialize.	self position: 50@50.	self color: Color white.	self extent: 60@70.! !!Card methodsFor: 'initializations' stamp: 'Amjad Toama 3/8/2023 11:09'!initializeRank: aRank suit: aSuit	rank := aRank.	suit := aSuit.	self setSuitsPositions.		(rank isCharacter) ifTrue: [		|position|		position := self cardSpecial.		position do: [:place |				| rankMorph |				rankMorph := aRank asMorph.				rankMorph position: self position + ((self width @ self height) * (place)).				self addMorph: rankMorph.			]		]! !!Card methodsFor: 'getters' stamp: 'Amjad Toama 3/15/2023 14:18'!cardHolder	^cardHolder! !!Card methodsFor: 'getters' stamp: 'Amjad Toama 3/7/2023 23:14'!rank	^rank! !!Card methodsFor: 'getters' stamp: 'Amjad Toama 3/10/2023 01:17'!suit	^suit! !!Card methodsFor: 'setters' stamp: 'Amjad Toama 3/15/2023 14:18'!cardHolder: aCardHolder	cardHolder := aCardHolder! !!Card methodsFor: 'setters' stamp: 'Amjad Toama 3/8/2023 02:18'!rank: aRank	rank := aRank! !!Card methodsFor: 'drawing' stamp: 'Amjad Toama 5/17/2023 22:57'!setSuitsPositions	| suitImg positions |	suitImg := (ImageMorph new newForm: ((ImageReadWriter formFromFileNamed: ('img\', suit , '.png')) magnifyBy: 0.03)).	((rank isNumber) and: (rank > 1) and: (rank < 11)) ifTrue: [positions := (self perform: ('card' , rank asString) asSymbol)].	(rank isCharacter) ifTrue: [positions := self card1].		positions do: [:place |			| symbol |			symbol := suitImg copy.			symbol position: self position + ((self width @ self height) * (place)).			self addMorphFront: symbol.		]! !Object subclass: #Cards	instanceVariableNames: 'cards'	classVariableNames: ''	poolDictionaries: ''	category: 'WarGameSimulation'!!Cards methodsFor: 'initializations' stamp: 'Amjad Toama 3/7/2023 22:37'!initialize	super initialize.	cards := OrderedCollection new.! !!Cards methodsFor: 'getters' stamp: 'Amjad Toama 3/8/2023 03:05'!cards	^cards! !!Cards methodsFor: 'getters' stamp: 'Amjad Toama 3/8/2023 13:26'!size	^cards size! !!Cards methodsFor: 'adding' stamp: 'Amjad Toama 3/7/2023 22:41'!add: newCard	cards add: newCard! !!Cards methodsFor: 'adding' stamp: 'Amjad Toama 3/7/2023 22:42'!addFirst: newCard	cards addFirst: newCard! !!Cards methodsFor: 'adding' stamp: 'Amjad Toama 3/9/2023 17:48'!append: aCards	[aCards isEmpty] whileFalse: [self addFirst: aCards removeLast]! !!Cards methodsFor: 'testing' stamp: 'Amjad Toama 3/7/2023 22:46'!isEmpty	^cards isEmpty! !!Cards methodsFor: 'removing' stamp: 'Amjad Toama 3/7/2023 22:47'!remove: aCard	cards remove: aCard! !!Cards methodsFor: 'removing' stamp: 'Amjad Toama 3/7/2023 22:47'!removeLast	^cards removeLast! !!Cards methodsFor: 'shuffling' stamp: 'Amjad Toama 3/8/2023 11:38'!shuffled	cards := self copy: cards shuffled.	^cards! !!Cards methodsFor: 'copying' stamp: 'Amjad Toama 3/8/2023 12:32'!copy: aCards	| copyCards |	copyCards := Cards new.	aCards do: [:card | copyCards add: card copy].	^copyCards! !!Cards methodsFor: 'accessing' stamp: 'Amjad Toama 3/8/2023 13:28'!at: index	^cards at: index! !!Cards methodsFor: 'accessing' stamp: 'Amjad Toama 3/10/2023 01:18'!first	^cards first! !!Cards methodsFor: 'printing' stamp: 'Amjad Toama 3/10/2023 01:17'!printCards	cards do: [:card |
		Transcript show: '', card suit,' - ', card rank;cr. ]! !Cards subclass: #PlayingCards	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WarGameSimulation'!!PlayingCards methodsFor: 'as yet unclassified' stamp: 'Amjad Toama 3/8/2023 00:26'!initialize	super initialize.	self suits do: [:suit |		self ranks do: [:rank | cards add: (Card new initializeRank: rank suit: suit)]]! !!PlayingCards methodsFor: 'as yet unclassified' stamp: 'Amjad Toama 3/10/2023 01:59'!ranks	^#(2 3 4 5 6 7 8 9 10 $J $Q $K $A)! !!PlayingCards methodsFor: 'as yet unclassified' stamp: 'Amjad Toama 3/8/2023 11:05'!suits	^#('Spades' 'Hearts' 'Clubs' 'Diamonds')! !ImageMorph subclass: #PlayingTable	instanceVariableNames: 'dealArea glassFace game isStopped'	classVariableNames: 'Place'	poolDictionaries: ''	category: 'WarGameSimulation'!!PlayingTable methodsFor: 'event handling' stamp: 'Amjad Toama 3/12/2023 10:47'!handlesMouseDown: anEvent	^true! !!PlayingTable methodsFor: 'event handling' stamp: 'Amjad Toama 3/10/2023 02:11'!handlesMouseOver: anEvent	^true! !!PlayingTable methodsFor: 'event handling' stamp: 'Amjad Toama 5/17/2023 22:19'!mouseDown: anEvent	[self round.	self cardsAmount.] fork! !!PlayingTable methodsFor: 'event handling' stamp: 'Amjad Toama 5/17/2023 22:07'!mouseEnter: anEvent	isStopped := true! !!PlayingTable methodsFor: 'event handling' stamp: 'Amjad Toama 5/17/2023 22:06'!mouseLeave: anEvent	isStopped := false! !!PlayingTable methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/10/2023 02:18'!initialize	super initialize.	isStopped := true.	self initializeTable.	self openInWorld.! !!PlayingTable methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/10/2023 02:18'!initialize: playersNumber	Place := 0.	game := WarGame new.	game initialize: playersNumber.	self numberize.	self setPlace: game players.	self putCards.	self splitCards.	isStopped := false! !!PlayingTable methodsFor: 'initialize-release' stamp: 'Amjad Toama 5/17/2023 22:54'!initializeTable	self newForm: (ImageReadWriter formFromFileNamed: ('img\Table.png')).	self position: 200@100.	dealArea := EllipseMorph new.	dealArea color: Color transparent.	dealArea extent: 300@300.	dealArea borderWidth: 0.	dealArea center: self center.	glassFace := CircleMorph new.	glassFace color: Color transparent.	glassFace extent: self extent.	glassFace borderWidth: 0.	glassFace center: self center.	self addMorphFront: dealArea.	self addMorphFront: glassFace! !!PlayingTable methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/9/2023 19:26'!numberize	| number |	number := 0.	[game numberOfPlayers > number] whileTrue: [		number := number + 1.		self perform: ('number', (number asString)) asSymbol]! !!PlayingTable methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/9/2023 15:41'!setPlace: aPlayers	aPlayers do: [:player |		Place := Place + 1.		player place: (self places at: Place)]! !!PlayingTable methodsFor: 'run game' stamp: 'Amjad Toama 5/17/2023 22:16'!play	[game gameOver] whileFalse: [	[isStopped = true] whileTrue: [(Delay forMilliseconds: 100) wait.].	self round. self cardsAmount].	self announceWinner.	self replayButton.! !!PlayingTable methodsFor: 'run game' stamp: 'Amjad Toama 3/10/2023 00:04'!playAgain	self removeAllMorphs.	self initializeTable.	[self initialize: 4; play] fork.! !!PlayingTable methodsFor: 'run game' stamp: 'Amjad Toama 3/9/2023 23:47'!replayButton	| replay |	replay := SimpleButtonMorph new		target: self;		label: 'Replay';		center: self center;		actionSelector: #playAgain.	self addMorph: replay! !!PlayingTable methodsFor: 'run game' stamp: 'Amjad Toama 3/10/2023 01:32'!round	| activeCards roundWinner |	activeCards := self dealCards.	[(game isWar: activeCards) & (game gameOver not)] whileTrue: [		self warEffect.		activeCards := self war: activeCards.		(Delay forMilliseconds: 200) wait].	(Delay forMilliseconds: 200) wait.	roundWinner := game checkRoundWinner: activeCards.	(roundWinner notNil) ifTrue: [		self centerizeCards: activeCards.		game transferringOwnership: game pot to: roundWinner.		self roundWinEffect: roundWinner.		self takingThePot: game pot to: roundWinner]! !!PlayingTable methodsFor: 'run game' stamp: 'Amjad Toama 3/15/2023 14:27'!war: activeCards	| newActiveCards ranks |	ranks := self ranks.	newActiveCards := Cards new.	ranks do: [:rank | 		| playersToWar tempDeck |		"players with same cards rank insert them to playersToWar list."		playersToWar := LinkedList new.		tempDeck := Cards new.		"find out cards rank equal to the rank, insert them to the playersToWar and tempDeck"		activeCards cards do: [:card | (card rank = rank) ifTrue: [				tempDeck add: card.				playersToWar add: card cardHolder]].		"if there is one player in playersToWar means, it's not war"		(playersToWar size = 1) ifTrue: [newActiveCards add: (tempDeck removeLast)].		(playersToWar size > 1) ifTrue: [			self centerizeCards: tempDeck.			playersToWar do: [:player |				(self dealThreeCards: player) ifTrue: [					| card |					card := game dealCard: player.					(card notNil) ifTrue: [						newActiveCards add: card.						self dealCard: card]					]			]		]	].	^newActiveCards! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/15/2023 14:24'!centerizeCard: aCard	| direction |	direction := self directionToCenter: aCard cardHolder.	[aCard center = self center] whileFalse: [		(Delay forMilliseconds: 1) wait.		aCard position: aCard position + direction.		]! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/10/2023 01:22'!centerizeCards: aCard	aCard cards do: [:card | 		"Change"		dealArea addMorphFront: card.		self centerizeCard: card]! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/15/2023 14:24'!dealCard: aCard	| direction |	direction := self directionToCenter: aCard cardHolder.	[self checkCenterBounds: aCard] whileTrue: [		(Delay forMilliseconds: 1) wait.		aCard position: aCard position + direction.		]! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/9/2023 15:58'!dealCards	| activeCards |	activeCards := Cards new.	game players do: [:player |		| card |		card :=  game dealCard: player.		(card notNil) ifTrue: [activeCards add: card. self dealCard: card]].	^activeCards! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/9/2023 18:17'!dealThreeCards: aPlayer	| dealtCards |	dealtCards := game dealThreeCards: aPlayer.	(dealtCards notNil) ifTrue: [		self centerizeCards: dealtCards.		^true]	ifFalse: [		self centerizeCards: aPlayer cards.		game eliminatePlayer: aPlayer.		^false]! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/15/2023 14:25'!drawing: aCard	| direction |	direction := self directionFromCenter: aCard cardHolder.	[self checkBounds: aCard] whileTrue: [		(Delay forMilliseconds: 1) wait.		aCard position: aCard position + direction]! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/9/2023 14:51'!putCards	game cards cards do: [:card |		card center: self center.		self addMorph: card].! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/15/2023 14:26'!splitCards	| dupCards |	dupCards := game cards copy.	[dupCards isEmpty] whileFalse: [		game players do: [:player |			| card |			card := dupCards removeLast.			(card notNil) ifTrue: [				card cardHolder: player.				player cards add: card.				"Change"				self addMorphFront: card.				self drawing: card]			]		]! !!PlayingTable methodsFor: 'actions' stamp: 'Amjad Toama 3/10/2023 01:15'!takingThePot: pot to: aPlayer	| direction |	direction := self directionFromCenter: aPlayer.	pot cards do: [:card |		"Change"		glassFace addMorph: card behind: aPlayer cards first.		self drawing: card].	aPlayer cards append: game pot.	game newPot.! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 5/17/2023 23:05'!announceWinner	| winEffect winner |	winner := game announceWinner.	winEffect := CircleMorph new.	winEffect color: (Color green alpha: 0.2).	winEffect extent: self extent.	winEffect center: self center.	winner := (ImageMorph new newForm: (ImageReadWriter formFromFileNamed: ('img\Number ', winner id ,'.png'))).	winner center: self center.	winEffect addMorph: winner.	self addMorphFront: winEffect.! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/10/2023 02:07'!cardsAmount	| cardAmount |	cardAmount := CircleMorph new.	cardAmount color: (Color black alpha: 0.5).	cardAmount extent: self extent.	cardAmount borderWidth: 0.	cardAmount center: self center.	game players do: [:player |		| amount |		amount := TextMorph new			contents: '', player cards size;			color: Color blue.		amount position: (self perform: (('player', player id asString, 'Position:') asSymbol) with: amount).		cardAmount addMorph: amount].	self addMorph: cardAmount.	(Delay forSeconds: 1) wait.	self removeMorph: cardAmount.! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/8/2023 01:23'!directionFromCenter: aPlayer	^ (self directionToCenter: aPlayer) * (-1)! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/8/2023 01:25'!directionToCenter: aPlayer	(aPlayer place = 'up') ifTrue: [^(0@1)].	(aPlayer place = 'down') ifTrue: [^(0@(-1))].	(aPlayer place = 'left') ifTrue: [^(1@0)].	(aPlayer place = 'right') ifTrue: [^((-1)@0)].! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/8/2023 00:53'!places	^#('up' 'left' 'down' 'right')! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/9/2023 22:51'!player1Position: aMorph	^self position + ((self width / 2)@0) - ((aMorph width / 2)@0)! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/9/2023 22:52'!player2Position: aMorph	^self position + (0@(self height / 2)) - (0@(aMorph height / 2))! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/9/2023 22:52'!player3Position: aMorph	^self position + ((self width / 2)@self height) - ((aMorph width / 2)@aMorph height)! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/9/2023 22:52'!player4Position: aMorph	^self position + ((self width)@(self height / 2)) - ((aMorph width)@(aMorph height / 2))! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/10/2023 01:59'!ranks	^#(2 3 4 5 6 7 8 9 10 $J $Q $K $A)! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/9/2023 23:21'!roundWinEffect: aPlayer	| blink properMsg |	properMsg := ('player', aPlayer id asString, 'Position:') asSymbol.	blink := CircleMorph new.	blink borderWidth: 0.	blink color: (Color red alpha: 0.5).	blink position: (self perform: properMsg with: blink).	3 timesRepeat: [		self addMorphFront: blink.		(Delay forMilliseconds: 100) wait.		self removeMorph: blink.		(Delay forMilliseconds: 100) wait]	! !!PlayingTable methodsFor: 'other' stamp: 'Amjad Toama 3/8/2023 15:05'!warEffect	| warEffect |	warEffect := CircleMorph new.	warEffect color: (Color red alpha: 0.5).	warEffect extent: self extent.	warEffect center: self center.	self addMorphFront: warEffect.	(Delay forMilliseconds: 2000) wait.	self removeMorph: warEffect.! !!PlayingTable methodsFor: 'checkers' stamp: 'Amjad Toama 3/8/2023 02:41'!checkBounds: aCard	^((aCard bounds left > self bounds left) and: (aCard bounds right < self bounds right) and: (aCard bounds top > self bounds top) and: (aCard bounds bottom < self bounds bottom))! !!PlayingTable methodsFor: 'checkers' stamp: 'Amjad Toama 3/8/2023 02:41'!checkCenterBounds: aCard	^((aCard bounds left < dealArea bounds left) or: (aCard bounds right > dealArea bounds right) or: (aCard bounds top < dealArea bounds top) or: (aCard bounds bottom > dealArea bounds bottom))! !!PlayingTable methodsFor: 'getters' stamp: 'Amjad Toama 3/9/2023 16:01'!game	^game! !!PlayingTable methodsFor: 'numberize' stamp: 'Amjad Toama 5/17/2023 23:03'!number1	| number1 |	number1 := (ImageMorph new newForm: ((ImageReadWriter formFromFileNamed: ('img\Number 1.png')) magnifyBy: 0.1)).	number1 position: (self player1Position: number1).	self addMorphBack: number1.! !!PlayingTable methodsFor: 'numberize' stamp: 'Amjad Toama 5/17/2023 23:04'!number2	| number2 |	number2 :=(ImageMorph new newForm: ((ImageReadWriter formFromFileNamed: ('img\Number 2.png')) magnifyBy: 0.1)).	number2 position: (self player2Position: number2).	self addMorphBack: number2.! !!PlayingTable methodsFor: 'numberize' stamp: 'Amjad Toama 5/17/2023 23:04'!number3	| number3 |	number3 :=(ImageMorph new newForm: ((ImageReadWriter formFromFileNamed: ('img\Number 3.png')) magnifyBy: 0.1)).	number3 position: (self player3Position: number3).	self addMorphBack: number3! !!PlayingTable methodsFor: 'numberize' stamp: 'Amjad Toama 5/17/2023 23:04'!number4	| number4 |	number4 :=(ImageMorph new newForm: ((ImageReadWriter formFromFileNamed: ('img\Number 4.png')) magnifyBy: 0.1)).	number4 position: (self player4Position: number4).	self addMorphBack: number4! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PlayingTable class	instanceVariableNames: ''!!PlayingTable class methodsFor: 'as yet unclassified' stamp: 'Amjad Toama 3/8/2023 13:02'!initialize	super initialize.	Place := 0.! !Object subclass: #WarGame	instanceVariableNames: 'table numberOfPlayers pot cards players'	classVariableNames: ''	poolDictionaries: ''	category: 'WarGameSimulation'!!WarGame methodsFor: 'getters' stamp: 'Amjad Toama 3/9/2023 15:25'!cards	^cards! !!WarGame methodsFor: 'getters' stamp: 'Amjad Toama 3/9/2023 19:02'!numberOfPlayers	^numberOfPlayers! !!WarGame methodsFor: 'getters' stamp: 'Amjad Toama 3/9/2023 14:48'!players	^players! !!WarGame methodsFor: 'getters' stamp: 'Amjad Toama 3/9/2023 14:37'!pot	^pot! !!WarGame methodsFor: 'setters' stamp: 'Amjad Toama 3/9/2023 17:30'!newPot	pot := Cards new! !!WarGame methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/9/2023 14:41'!initialize	super initialize.	pot := Cards new.	cards := PlayingCards new.	cards := cards shuffled.! !!WarGame methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/9/2023 15:37'!initialize: numberOfPlayersValue	numberOfPlayers := numberOfPlayersValue.	self initializePlayers! !!WarGame methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/9/2023 14:43'!initializePlayers	players := LinkedList new.	WarPlayer initialize.	1 to: numberOfPlayers do: [:number |		| player |		player := WarPlayer new.		players addLast: player		]! !!WarGame methodsFor: 'checker' stamp: 'Amjad Toama 3/9/2023 16:57'!announceWinner	(players size = 0) ifTrue: [Transcript show: 'Tie'; cr.]		ifFalse: [Transcript show: 'The winner is number: ', (players at: 1) id; cr.	 ^(players at: 1)]! !!WarGame methodsFor: 'checker' stamp: 'Amjad Toama 3/15/2023 14:22'!checkRoundWinner: aCards	| dominantCard |	dominantCard := Card new.	dominantCard rank: 0.	aCards cards do: [:card | 		(dominantCard < card) ifTrue: [dominantCard := card]].	^dominantCard cardHolder.! !!WarGame methodsFor: 'checker' stamp: 'Amjad Toama 3/9/2023 21:11'!gameOver	^(players size > 1) not! !!WarGame methodsFor: 'checker' stamp: 'Amjad Toama 3/8/2023 02:21'!isWar: activeCards	1 to: (activeCards size) do: [:p1 |		(p1 + 1) to: (activeCards size) do: [:p2 |			((activeCards at: p1) rank = (activeCards at: p2) rank) ifTrue: [^true]]		].	^false! !!WarGame methodsFor: 'actions' stamp: 'Amjad Toama 3/9/2023 15:57'!dealCard: aPlayer	| card |	card := aPlayer dealCard.	(card isNil)	ifTrue: [self eliminatePlayer: aPlayer. ^nil]	ifFalse: [pot add: card. ^card]! !!WarGame methodsFor: 'actions' stamp: 'Amjad Toama 3/8/2023 14:52'!dealCards	| activeCards |	activeCards := Cards new.	players do: [:player |		| card |		card :=  self dealCard: player.		(card notNil) ifTrue: [activeCards add: card]		].	^activeCards! !!WarGame methodsFor: 'actions' stamp: 'Amjad Toama 3/9/2023 18:06'!dealThreeCards: aPlayer	| dealtCards |	dealtCards := Cards new.	(aPlayer cards size < 3) ifTrue: [^nil].		3 timesRepeat: [		| card |		card := aPlayer dealCard.		pot add: card.		dealtCards add: card		].	^dealtCards! !!WarGame methodsFor: 'actions' stamp: 'Amjad Toama 3/9/2023 18:04'!eliminatePlayer: aPlayer	(players includes: aPlayer) ifTrue: [		players remove: aPlayer.		pot append: aPlayer cards		]! !!WarGame methodsFor: 'actions' stamp: 'Amjad Toama 3/15/2023 14:20'!splitCards	| dupDeck |	dupDeck := cards copy.	[dupDeck isEmpty] whileFalse: [		players do: [:player |				(dupDeck isEmpty) ifFalse: [					| card |					card := dupDeck removeLast.					card cardHolder: player.					player cards add: card.					table drawing: card]]		].! !!WarGame methodsFor: 'actions' stamp: 'Amjad Toama 5/17/2023 21:09'!transferringOwnership: aCards to: aPlayer	((aPlayer = nil) or: (aPlayer class ~= WarPlayer) or: (aCards class ~= Cards)) ifFalse: [	aCards cards do: [:card | card cardHolder: aPlayer. card cardHolder place: aPlayer place]]! !!WarGame methodsFor: 'run game' stamp: 'Amjad Toama 3/10/2023 01:30'!play	[self gameOver] whileFalse: [		| activeCards roundWinner |		activeCards := self dealCards.		[(self isWar: activeCards) & (self gameOver not)] whileTrue: [			table warEffect.			activeCards := self war: activeCards.			(Delay forMilliseconds: 100) wait].		(Delay forMilliseconds: 100) wait.		roundWinner := self checkRoundWinner: activeCards.		(roundWinner notNil) ifTrue: [			table centerizeCards: activeCards.			self transferringOwnership: pot to: roundWinner.			table takingThePot: pot to: roundWinner.			(roundWinner cards) append: pot]		].	self announceWinner! !!WarGame methodsFor: 'run game' stamp: 'Amjad Toama 3/15/2023 14:23'!war: activeCards	| newActiveCards ranks |	ranks := #(2 3 4 5 6 7 8 9 $J $Q $K $A).	newActiveCards := Cards new.	ranks do: [:rank | 		| playersToWar tempDeck |		"players with same cards rank insert them to playersToWar list."		playersToWar := LinkedList new.		tempDeck := Cards new.		"find out cards rank equal to the rank, insert them to the playersToWar and tempDeck"		activeCards cards do: [:card | (card rank = rank) ifTrue: [				tempDeck add: card.				playersToWar add: card cardHolder]].		"if there is one player in playersToWar means, it's not war"		(playersToWar size = 1) ifTrue: [newActiveCards add: (tempDeck removeLast)].		(playersToWar size > 1) ifTrue: [			table centerizeCards: tempDeck.			playersToWar do: [:player |				(self dealThreeCards: player notNil) ifTrue: [					| card |					card := self dealCard: player.					(card notNil) ifTrue: [newActiveCards add: card]					]				ifFalse: [self eliminatePlayer: player]			]		]	].	^newActiveCards! !Object subclass: #WarPlayer	instanceVariableNames: 'id cards place'	classVariableNames: 'Count'	poolDictionaries: ''	category: 'WarGameSimulation'!!WarPlayer methodsFor: 'getters' stamp: 'Amjad Toama 3/8/2023 00:31'!cards	^cards! !!WarPlayer methodsFor: 'getters' stamp: 'Amjad Toama 3/8/2023 00:31'!id	^id! !!WarPlayer methodsFor: 'getters' stamp: 'Amjad Toama 3/8/2023 01:24'!place	^place! !!WarPlayer methodsFor: 'setters' stamp: 'Amjad Toama 3/8/2023 00:31'!cards: aCards	cards := aCards! !!WarPlayer methodsFor: 'setters' stamp: 'Amjad Toama 3/8/2023 01:24'!place: aPlace	place := aPlace! !!WarPlayer methodsFor: 'initialize-release' stamp: 'Amjad Toama 3/8/2023 00:22'!initialize	super initialize.	cards := Cards new.	Count := Count + 1.	id := Count.! !!WarPlayer methodsFor: 'actions' stamp: 'Amjad Toama 3/8/2023 17:05'!dealCard	(cards isEmpty) ifTrue: [^nil] ifFalse: [^cards removeLast]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WarPlayer class	instanceVariableNames: ''!!WarPlayer class methodsFor: 'class initialization' stamp: 'Amjad Toama 3/8/2023 00:20'!initialize	super initialize.	Count := 0.! !PlayingTable initialize!WarPlayer initialize!